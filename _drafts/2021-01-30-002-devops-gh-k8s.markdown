---
layout: post
title: DevOps with Azure, GitHub and Kubernetes
date: 2021-01-29 00:00:00 +0530
description: A project on microservice architecture using latest tools and technologies
comments: false
tags: [Azure, GitHub, Kubernetes]
---

## Introduction

Having made a case for [adoption of Microservice architecture](/001-architecture-evolution/), let us dive deep into what it takes to implement such type of projects.

They say _the best way to learn something is by doing it_.  
So lets begin a journey of learning how to implement contemporary architectures with latest tools and technologies available at our disposal today, by doing a sample project.

## Sample Project

**Over the years, from my experience, i have observed that the way we learn new technologies and the way they need to be implemented in enterprise projects differ widely**.

Because while learning, the focus is on <u>speed</u> and <u>output</u>.  
But when applying the same in practical projects, the focus turns to impementing it in _best_, _efficient_ and _secure_ way.
This is the classic difference between **Knowledge** and **Experience**. Knowledge teaches us <u>what to do</u>, while Experience teaches us <u>what Not to do</u>.

This experience comes in handy while executing enterprise projects, as you have to factor many things like standards, conventions, security, access control, capacity, cost control, best practices, documentation, collaboration with business teams etc.  
Also, these projects are costly to implemnet and hence they will be in use for a very long time.

So let us increase both knowledge and experience by practically implementing a sample project for a fictious enterprise.  
This fictious enterprise is called **AshLand Inc**.  
As you may have noticed, the name is just a play on my name and does not bear any resemblence to any existing organization in the world today.

## AshLand Inc.

So lets assume AshLand Inc. (AINC) is a fortune 500 company based in USA. It has many businesses but its flagship business is selling products online (eCommerce). We will be focusing on this e-commerce business during this project.  
The eCommerce business does not have a single physical store. It sells all its products online through various channels like website (portal), mobile (app), external partners etc. This is currently supported by their Legacy IT systems, which is based on technologies that were put in place atleast a decades ago.

Because of it, the architecture has started showing its age and is unable to support the scale and changes expected by the business that is growing rapidly. Its CTO has been into conferences and has been hearing talks of how other organizations were facing similar issues and they resolved their problems by modernizing their architectures and adopting latest tools and technologies.  
Also, AINC has most of its IT assets in their own datacenters and they are looking to slowly adopt public cloud and migrate many of its assets to cloud, to save cost and benefit from new and innovative services provided by cloud providers.

So the management of AINC has allocated a budget and has commissioned a project to enable them to evaluate modern technologies and platforms. This project is named as **Platform Modernization (PMOD)** initiative and to implement it, they have formed a team and tasked the team to create a <u>Minimum Vialble Product (MVP)</u> replicating existing IT setup of their eCommerce business.  
Next section highlights the technologies used to build this MVP.

## Technology Stack

To start with, we are going to use the following:

- **Cloud:** Azure public cloud
- **Containerization:** Docker
- **Version control (git provider):** GitHub
- **Container registry:** Azure Container Registry (ACR)
- **Container orchestrator:** Azure Kubernetes Service (AKS)
- **CI/CD pipelines:** GitHub Actions
- **Infrastructure automation:** Azure CLI

As we move ahead in the project, we will keep extending the above list

## Naming Conventions

One of the most important thing in Enterprise projects, is to come up with a consistent naming convention for naming resources. This is different from the learning phase, where you can get away with naming anything you like, as you know what you are creating has a shoft life span and can be deleted soon.

But artifacts created for enteprise projects live till the end of project. And hence it is always better to come up with a proper naming conventions that accurately reflects where those resource belong.

We will be using the following short texts for various things, as shown below

- **Organisation:** Ashland Inc. (ainc)
- **Location:** East US (eus)
- **Project:** Platfom Modernization (pmod)

## Environments

For any enterprise project, it is recommended to have multiple environments.  
However in our case, we will be working with 2 environments

- Non-Production (NPD)
- Production (PRD)

The <u>NonProd</u> environment will be where the development of new features continues and the <u>Prod</u> environment will be where, things that are ready, will be deployed for business users to evaluate.
